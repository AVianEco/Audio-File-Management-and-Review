the total recordings possible per site are:", est_total_files, "files."))
#Count number of recordings per site
site_recs <- file_track %>%
group_by(site_ID) %>%
summarise(n_files = n())
site_recs <- site_recs%>%
mutate(percent_estimated_files = n_files/est_total_files*100)
#Sort the table lowest to highest by percent of estimated files captured.
site_recs <- site_recs %>%
arrange(percent_estimated_files)
#View the table
view(site_recs)
# Set up the plot #TODO: adjust the site names to be vertically labelled.
G1 <- ggplot(site_recs, aes(x = site_ID, y = n_files)) +
# Add the bars
geom_bar(stat = "identity", fill="#1254ab") +
# Format the plot and add labels
labs(title = "Number Recordings by Site",
x = "Site ID",
y = "Count of Total Recordings") +
theme_bw(base_size = 14) +
# Add the horizontal line and format it
geom_hline(aes(yintercept = est_total_files, linetype = "Number of Scheduled Files"),
color = "#fdee03", linewidth = 1.5, show.legend = TRUE) +
scale_linetype_manual(name = "", values = "dashed") +
# Set the fill colors and labels
scale_fill_manual(values = "#fdee03",
labels = "") +
ylim(0,(max(max(site_recs$n_files)*1.1, est_total_files))) +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90))
# Show the plot
G1
#Save the graph
ggsave(file.path(destination_filepath, "Num_Files_by_Site.png"),
plot = G1, width = 8, height = 6, dpi = 300)
#Count number of recordings per site
site_recs <- file_track %>%
group_by(site_ID) %>%
summarise(n_files = n())
site_recs <- site_recs%>%
mutate(percent_estimated_files = n_files/est_total_files*100)
#Sort the table lowest to highest by percent of estimated files captured.
site_recs <- site_recs %>%
arrange(percent_estimated_files)
#View the table
view(site_recs)
# Set up the plot
G1 <- ggplot(site_recs, aes(x = site_ID, y = n_files)) +
# Add the bars
geom_bar(stat = "identity", fill="#1254ab") +
# Format the plot and add labels
labs(title = "Number Recordings by Site",
x = "Site ID",
y = "Count of Total Recordings") +
theme_bw(base_size = 14) +
# Add the horizontal line and format it
geom_hline(aes(yintercept = est_total_files, linetype = "Number of Scheduled Files"),
color = "#fdee03", linewidth = 1.5, show.legend = TRUE) +
scale_linetype_manual(name = "", values = "dashed") +
# Set the fill colors and labels
scale_fill_manual(values = "#fdee03",
labels = "") +
ylim(0,(max(max(site_recs$n_files)*1.1, est_total_files))) +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90))
# Show the plot
G1
#Save the graph
ggsave(file.path(destination_filepath, "Num_Files_by_Site.png"),
plot = G1, width = 8, height = 6, dpi = 300)
#create a dataframe with all unique dates by site.
date_check <- file_track %>%
group_by(site_ID, date) %>%
summarise(file_count = n(), .groups = 'drop')
# Order by site_ID and date (ascending oldest to newest)
date_check <- date_check[order(date_check$site_ID, date_check$date),]
view(date_check)
# Plot with ggplot2
G2<- ggplot(date_check, aes(x = date, y = site_ID)) +
theme_bw() +
geom_point(aes(size = file_count, color = file_count)) +
scale_radius(range = c(2, 6)) +
scale_color_gradient2(low = "red2", mid = "goldenrod1", high = "yellow",
midpoint= mean(date_check$file_count)) +
labs(x = "Dates Active", y = "Site ID", title = "Files Captured by Date") +
guides(colour = guide_legend("Number of Files"),
size = guide_legend("Number of Files")) +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90)) +
#you may wish to change the number of days to make the X-axis more legible*
scale_x_date(date_breaks = "2 day", date_labels = "%Y-%m-%d")
# Show the plot
G2
#Save the graph
ggsave(file.path(destination_filepath, "Number_Files_by_Date.png"),
plot = G2, width = 8, height = 6, dpi = 300)
#create a dataframe with all unique dates by site.
time_check<-file_track %>%
group_by(site_ID, time) %>%
summarise(file_count=n(), .groups = "drop")
# Order by site_ID and time
time_check <- time_check[order(time_check$site_ID, time_check$time),]
view(time_check)
# Create a vector of time values from "00:00:00" to "23:00:00"
time_values <- seq(as.POSIXct("00:00:00", format = "%H:%M:%S"),
as.POSIXct("23:00:00", format = "%H:%M:%S"), by = "hour")
# Convert the time column in your data frame to POSIXct format
time_check$time <- as.POSIXct(time_check$time, format = "%H:%M:%S")
# Plot with ggplot2
G3<- ggplot(time_check, aes(x = time, y = site_ID)) +
theme_bw() +
geom_point(aes(size = file_count, color = file_count)) +
scale_size(range = c(2, 6)) +
scale_color_gradient2(low = "yellow", mid = "seagreen1", high = "royalblue3",
midpoint= mean(time_check$file_count)) +
labs(x = "Times Active", y = "Site ID", title = "Files Captured by Time") +
guides(colour = guide_legend("Number of Files"),
size = guide_legend("Number of Files")) +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90)) +
scale_x_time(breaks = time_values, labels = format(time_values, "%H:%M:%S"))
# Show the plot
G3
#Save the graph
ggsave(file.path(destination_filepath, "Number_Files_by_Time.png"),
plot = G3, width = 8, height = 6, dpi = 300)
#Count number of recordings per file size (rounded to nearest mb)
size_check <- file_track %>%
mutate(rounded_filesize = round(file_size_mb)) %>%
group_by(rounded_filesize) %>%
summarise(n_files = n())
view(size_check)
# Set up the plot for file sizes
G4 <- ggplot(size_check, aes(x = rounded_filesize, y = n_files)) +
# Add the bars
geom_bar(stat = "identity", fill="seagreen3") +
# Format the plot and add labels
labs(title = "Number Recordings by Size",
x = "MB per file",
y = paste("Count of Total Recordings (sqrt-scaled axis)")) +
theme_bw() +
theme(legend.position = "bottom") +
scale_y_sqrt() +
geom_text(aes(label = n_files), vjust = -0.5, color = "black")
G4
# Find mean file size and sampling frequency by site
size_check <- file_track %>%
group_by(site_ID) %>%
summarise(avg_file_size_mb = mean(file_size_mb),
avg_sampling_frequency = mean(sampling_frequency))
#view size_check
view(size_check)
#add a column to check if site recordings match programmed sampling frequency
size_check$matching_SF <- size_check$avg_sampling_frequency == programmed_SF
#view size_check
view(size_check)
# Set up the plot for file sizes and sampling frequency
G4 <- ggplot(size_check, aes(x = site_ID, y = avg_file_size_mb)) +
# Add the bars
geom_bar(stat = "identity", fill="seagreen3") +
# Format the plot and add labels
labs(title = "Mean File Size by Site ID",
x = "Site_ID",
y = "Mean File Size (MB)") +
theme_bw() +
theme(legend.position = "bottom") +
geom_text(aes(label = n_files), vjust = -0.5, color = "black")
G4
# Set up the plot for file sizes and sampling frequency
G4 <- ggplot(size_check, aes(x = site_ID, y = avg_file_size_mb)) +
# Add the bars
geom_bar(stat = "identity", fill="seagreen3") +
# Format the plot and add labels
labs(title = "Mean File Size by Site ID",
x = "Site_ID",
y = "Mean File Size (MB)") +
theme_bw() +
theme(legend.position = "bottom")
#view size_check
view(size_check)
# Set up the plot for file sizes and sampling frequency
G4 <- ggplot(size_check, aes(x = site_ID, y = avg_file_size_mb)) +
# Add the bars
geom_bar(stat = "identity", fill="seagreen3") +
# Format the plot and add labels
labs(title = "Mean File Size by Site ID",
x = "Site_ID",
y = "Mean File Size (MB)") +
theme_bw()
G4
test_plot<- ggplot(size_check, aes(x = site_ID)) +
geom_bar(aes(y = avg_file_size_mb), stat = "identity", fill = "skyblue", position = "dodge") +
geom_bar(aes(y = avg_sampling_frequency), stat = "identity", fill = "orange", position = "dodge") +
labs(title = "Mean File Size and Sampling Frequency by Site ID",
x = "Site ID",
y = "Value") +
scale_y_continuous(sec.axis = sec_axis(~., name = "Mean Sampling Frequency")) +
theme_minimal()
test_plot
test_plot<- # Plotting mean file size and mean sampling frequency by site ID
ggplot(size_check, aes(x = site_ID)) +
geom_bar(aes(y = avg_file_size_mb), stat = "identity", fill = "skyblue", position = position_dodge(width = 0.9)) +
geom_bar(aes(y = avg_sampling_frequency), stat = "identity", fill = "orange", position = position_dodge(width = 0.9), width = 0.5) +
labs(title = "Mean File Size and Sampling Frequency by Site ID",
x = "Site ID",
y = "Value") +
scale_y_continuous(sec.axis = sec_axis(~., name = "Mean Sampling Frequency")) +
theme_minimal()
test_plot
# Find mean file size and sampling frequency by site
size_check <- file_track %>%
group_by(site_ID) %>%
summarise(avg_file_size_bytes = mean(file_size_mb)*1000,
avg_sampling_frequency = mean(sampling_frequency))
#add a column to check if site recordings match programmed sampling frequency
size_check$matching_SF <- size_check$avg_sampling_frequency == programmed_SF
#view size_check
view(size_check)
# Find mean file size and sampling frequency by site
size_check <- file_track %>%
group_by(site_ID) %>%
summarise(avg_file_size_mb = mean(file_size_mb),
avg_sampling_frequency_kHz = mean(sampling_frequency)/1000)
#add a column to check if site recordings match programmed sampling frequency
size_check$matching_SF <- size_check$avg_sampling_frequency == programmed_SF
#add a column to check if site recordings match programmed sampling frequency
size_check$matching_SF <- size_check$avg_sampling_frequency == programmed_SF/1000
#view size_check
view(size_check)
#add a column to check if site recordings match programmed sampling frequency
size_check$matching_SF <- size_check$avg_sampling_frequency == programmed_SF/1000
rm(list = ls())
# ------Load Libraries------
library(anytime)
library(lubridate)
library(tidyverse)
library(ggplot2)
library(tcltk)
# ------INPUT AND OUTPUTS: Define File Locations and Output Name*------
# Find the file name and path to the saved file tracking CSV on your computer.
source_CSV <- file.choose()
# Find the directory where you'd like to save visualized outputs.
destination_filepath <- tk_choose.dir()
# ------Load the file------
file_track <- read.csv(source_CSV)
#-----DATA CHECKING: Check your headers*-----
# Create the list of required headers
headers_req<-c("file_name","time","date","site_ID", "file_size_mb")
# Check against your file list.
has_req<-sum(headers_req %in% colnames(file_track))
# Describe in console what columns need replacing.
if(has_req==5){
message("All required headers exist skip to DATA CHECKING: Format date and time")
} else{
missing_headers <- headers_req[!(headers_req %in% colnames(file_track))]
message(paste("You are missing some required headers, this includes: ", paste(missing_headers, collapse = ", "),
". Go to the assign required headers section and replace headers as required."))
}
# apply anydate() function to convert to standard YYYY-MM-DD format
file_track$date <- anydate(file_track$date)
#format time using parse-time:
for (i in seq_along(file_track$time)) {
if (grepl(":", file_track$time[i])) {
# Do nothing if the time is already in HH:MM:SS format)
} else {
# Remove dashes and parse time
file_track$time[i] <- gsub("-", "", file_track$time[i])
file_track$time[i] <- parse_time(file_track$time[i], "%H%M%S")
}
}
fileperday<-24 #edit this number with your own files/day estimate based off your recording schedule.
deployment_date<-ymd(20230414)
retrieval_date<- ymd(20230623)
programmed_SF<-c(10)
programmed_SF<-c(24000)
programmed_recduration<-c(10)
#Calculate number of days between dates
deployment_length <- as.numeric(difftime(retrieval_date, deployment_date, units = "days")+1)
message(paste("Your devices were deployed up to:", deployment_length, "days."))
#Calculate total possible audio recordings
est_total_files<-fileperday * deployment_length
message(paste("Based on your recording schedule and deployment length,
the total recordings possible per site are:", est_total_files, "files."))
#Count number of recordings per site
site_recs <- file_track %>%
group_by(site_ID) %>%
summarise(n_files = n())
site_recs <- site_recs%>%
mutate(percent_estimated_files = n_files/est_total_files*100)
#Sort the table lowest to highest by percent of estimated files captured.
site_recs <- site_recs %>%
arrange(percent_estimated_files)
#View the table
view(site_recs)
# Set up the plot
G1 <- ggplot(site_recs, aes(x = site_ID, y = n_files)) +
# Add the bars
geom_bar(stat = "identity", fill="#1254ab") +
# Format the plot and add labels
labs(title = "Number Recordings by Site",
x = "Site ID",
y = "Count of Total Recordings") +
theme_bw(base_size = 14) +
# Add the horizontal line and format it
geom_hline(aes(yintercept = est_total_files, linetype = "Number of Scheduled Files"),
color = "#fdee03", linewidth = 1.5, show.legend = TRUE) +
scale_linetype_manual(name = "", values = "dashed") +
# Set the fill colors and labels
scale_fill_manual(values = "#fdee03",
labels = "") +
ylim(0,(max(max(site_recs$n_files)*1.1, est_total_files))) +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90))
# Show the plot
G1
#Save the graph
ggsave(file.path(destination_filepath, "Num_Files_by_Site.png"),
plot = G1, width = 8, height = 6, dpi = 300)
#create a dataframe with all unique dates by site.
date_check <- file_track %>%
group_by(site_ID, date) %>%
summarise(file_count = n(), .groups = 'drop')
# Order by site_ID and date (ascending oldest to newest)
date_check <- date_check[order(date_check$site_ID, date_check$date),]
view(date_check)
# Plot with ggplot2
G2<- ggplot(date_check, aes(x = date, y = site_ID)) +
theme_bw() +
geom_point(aes(size = file_count, color = file_count)) +
scale_radius(range = c(2, 6)) +
scale_color_gradient2(low = "red2", mid = "goldenrod1", high = "yellow",
midpoint= mean(date_check$file_count)) +
labs(x = "Dates Active", y = "Site ID", title = "Files Captured by Date") +
guides(colour = guide_legend("Number of Files"),
size = guide_legend("Number of Files")) +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90)) +
#you may wish to change the number of days to make the X-axis more legible*
scale_x_date(date_breaks = "2 day", date_labels = "%Y-%m-%d")
# Show the plot
G2
#Save the graph
ggsave(file.path(destination_filepath, "Number_Files_by_Date.png"),
plot = G2, width = 8, height = 6, dpi = 300)
#create a dataframe with all unique dates by site.
time_check<-file_track %>%
group_by(site_ID, time) %>%
summarise(file_count=n(), .groups = "drop")
# Order by site_ID and time
time_check <- time_check[order(time_check$site_ID, time_check$time),]
view(time_check)
# Create a vector of time values from "00:00:00" to "23:00:00"
time_values <- seq(as.POSIXct("00:00:00", format = "%H:%M:%S"),
as.POSIXct("23:00:00", format = "%H:%M:%S"), by = "hour")
# Convert the time column in your data frame to POSIXct format
time_check$time <- as.POSIXct(time_check$time, format = "%H:%M:%S")
# Plot with ggplot2
G3<- ggplot(time_check, aes(x = time, y = site_ID)) +
theme_bw() +
geom_point(aes(size = file_count, color = file_count)) +
scale_size(range = c(2, 6)) +
scale_color_gradient2(low = "yellow", mid = "seagreen1", high = "royalblue3",
midpoint= mean(time_check$file_count)) +
labs(x = "Times Active", y = "Site ID", title = "Files Captured by Time") +
guides(colour = guide_legend("Number of Files"),
size = guide_legend("Number of Files")) +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90)) +
scale_x_time(breaks = time_values, labels = format(time_values, "%H:%M:%S"))
# Show the plot
G3
#Save the graph
ggsave(file.path(destination_filepath, "Number_Files_by_Time.png"),
plot = G3, width = 8, height = 6, dpi = 300)
# Find mean file size and sampling frequency by site
size_check <- file_track %>%
group_by(site_ID) %>%
summarise(avg_file_size_mb = mean(file_size_mb),
avg_sampling_frequency_kHz = mean(sampling_frequency)/1000)
#add a column to check if site recordings match programmed sampling frequency
size_check$matching_SF <- size_check$avg_sampling_frequency == programmed_SF/1000
#add a column to check if site recordings match programmed sampling frequency
size_check$matching_SF <- size_check$avg_sampling_frequency_kHz == programmed_SF/1000
#view size_check
view(size_check)
test_plot<-# Plotting mean file size and mean sampling frequency by site ID
ggplot(size_check, aes(x = site_ID)) +
geom_bar(aes(y = avg_file_size_mb), stat = "identity", fill = "skyblue", position = position_dodge(width = 0.9)) +
geom_bar(aes(y = avg_sampling_frequency), stat = "identity", fill = "orange", position = position_dodge(width = 0.9), width = 0.5) +
labs(title = "Mean File Size and Sampling Frequency by Site ID",
x = "Site ID",
y = "Value") +
scale_y_continuous(sec.axis = sec_axis(~., name = "Mean Sampling Frequency")) +
theme_minimal()
test_plot
# Set up the plot for file sizes and sampling frequency
ggplot(size_check, aes(x = site_ID)) +
geom_bar(aes(y = avg_file_size_mb), stat = "identity", fill = "skyblue", position = position_dodge(width = 0.9)) +
geom_bar(aes(y = avg_sampling_frequency_kHz), stat = "identity", fill = "orange", position = position_dodge(width = 0.9), width = 0.5) +
labs(title = "Mean File Size and Sampling Frequency by Site ID",
x = "Site ID",
y = "Value") +
scale_y_continuous(sec.axis = sec_axis(~., name = "Mean Sampling Frequency")) +
theme_minimal()
ggplot(size_check, aes(x = site_ID)) +
geom_bar(aes(y = avg_file_size_mb), stat = "identity", fill = "skyblue", position = position_dodge(width = 0.5)) +
geom_bar(aes(y = avg_sampling_frequency_kHz), stat = "identity", fill = "orange", position = position_dodge(width = 0.9), width = 0.5) +
labs(title = "Mean File Size and Sampling Frequency by Site ID",
x = "Site ID",
y = "Value") +
scale_y_continuous(sec.axis = sec_axis(~., name = "Mean Sampling Frequency")) +
theme_minimal()
ggplot(size_check, aes(x = site_ID)) +
geom_bar(aes(y = avg_file_size_mb), stat = "identity", fill = "skyblue", position = position_dodge(width = 0.5), width=0.5) +
geom_bar(aes(y = avg_sampling_frequency_kHz), stat = "identity", fill = "orange", position = position_dodge(width = 0.9), width = 0.5) +
labs(title = "Mean File Size and Sampling Frequency by Site ID",
x = "Site ID",
y = "Value") +
scale_y_continuous(sec.axis = sec_axis(~., name = "Mean Sampling Frequency")) +
theme_minimal()
# Set up the plot for file sizes and sampling frequency
ggplot(size_check, aes(x = site_ID)) +
geom_bar(aes(y = avg_file_size_mb), stat = "identity", fill = "skyblue", position = position_dodge(width = 0.5), width=0.5) +
geom_bar(aes(y = avg_sampling_frequency_kHz), stat = "identity", fill = "orange", position = position_dodge(width = 0.9), width = 0.5) +
labs(title = "Mean File Size and Sampling Frequency by Site ID",
x = "Site ID",
y = "Value") +
scale_y_continuous(sec.axis = sec_axis(~., name = "Mean Sampling Frequency")) +
theme_bw()
# Set up the plot for file sizes and sampling frequency
ggplot(size_check, aes(x = site_ID)) +
geom_bar(aes(y = avg_file_size_mb), stat = "identity", fill = "skyblue", position = position_dodge(width = 0.1), width=0.5) +
geom_bar(aes(y = avg_sampling_frequency_kHz), stat = "identity", fill = "orange", position = position_dodge(width = 0.9), width = 0.5) +
labs(title = "Mean File Size and Sampling Frequency by Site ID",
x = "Site ID",
y = "Value") +
scale_y_continuous(sec.axis = sec_axis(~., name = "Mean Sampling Frequency")) +
theme_bw()
# Set up the plot for file sizes and sampling frequency
ggplot(size_check, aes(x = site_ID)) +
geom_bar(aes(y = avg_file_size_mb), stat = "identity", fill = "skyblue", position = position_dodge(width = 0.5)) +
geom_bar(aes(y = avg_sampling_frequency_kHz), stat = "identity", fill = "orange", position = position_dodge(width = 0.5), width = 0.5) +
labs(title = "Mean File Size and Sampling Frequency by Site ID",
x = "Site ID",
y = "Value") +
scale_y_continuous(sec.axis = sec_axis(~., name = "Mean Sampling Frequency")) +
theme_bw()
ggplot(size_check, aes(x = site_ID)) +
geom_bar(aes(y = avg_file_size_mb), stat = "identity", fill = "skyblue", position = position_dodge(width = 0.1), width = 0.5) +
geom_bar(aes(y = avg_sampling_frequency_kHz), stat = "identity", fill = "orange", position = position_dodge(width = 0.9), width = 0.5) +
labs(title = "Mean File Size and Sampling Frequency by Site ID",
x = "Site ID",
y = "Value") +
scale_y_continuous(sec.axis = sec_axis(~., name = "Mean Sampling Frequency")) +
theme_bw()
# Set up the plot for file sizes and sampling frequency
ggplot(size_check, aes(x = site_ID)) +
geom_bar(aes(y = avg_file_size_mb), stat = "identity", fill = "skyblue", position = position_dodge(width = 0.9)) +
geom_bar(aes(y = avg_sampling_frequency_kHz), stat = "identity", fill = "orange", position = position_dodge(width = 0.9), width = 0.5) +
labs(title = "Mean File Size and Sampling Frequency by Site ID",
x = "Site ID",
y = "Value") +
scale_y_continuous(sec.axis = sec_axis(~., name = "Mean Sampling Frequency")) +
theme_bw()
# Set up the plot for file sizes and sampling frequency
ggplot(size_check, aes(x = site_ID)) +
geom_bar(aes(y = avg_file_size_mb), stat = "identity", fill = "skyblue", position = position_dodge(width = 0.8), width=0.5) +
geom_bar(aes(y = avg_sampling_frequency_kHz), stat = "identity", fill = "orange", position = position_dodge(width = 0.8), width = 0.3) +
labs(title = "Mean File Size and Sampling Frequency by Site ID",
x = "Site ID",
y = "Value") +
scale_y_continuous(sec.axis = sec_axis(~., name = "Mean Sampling Frequency")) +
theme_bw()
# Set up the plot for file sizes and sampling frequency
ggplot(size_check, aes(x = site_ID)) +
geom_bar(aes(y = avg_file_size_mb), stat = "identity", fill = "skyblue", position = position_dodge(width = 0.8), width=0.5) +
geom_bar(aes(y = avg_sampling_frequency_kHz), stat = "identity", fill = "orange", position = position_dodge(width = 0.8)) +
labs(title = "Mean File Size and Sampling Frequency by Site ID",
x = "Site ID",
y = "Value") +
scale_y_continuous(sec.axis = sec_axis(~., name = "Mean Sampling Frequency")) +
theme_bw()
?position_dodge
# Set up the plot for file sizes and sampling frequency
ggplot(size_check, aes(x = site_ID)) +
geom_bar(aes(y = avg_file_size_mb), stat = "identity", fill = "skyblue", position = position_dodge(), width=0.5) +
geom_bar(aes(y = avg_sampling_frequency_kHz), stat = "identity", fill = "orange", position = position_dodge()) +
labs(title = "Mean File Size and Sampling Frequency by Site ID",
x = "Site ID",
y = "Value") +
scale_y_continuous(sec.axis = sec_axis(~., name = "Mean Sampling Frequency")) +
theme_bw()
# Set up the plot for file sizes and sampling frequency
ggplot(size_check, aes(x = site_ID)) +
geom_bar(aes(y = avg_file_size_mb), stat = "identity", fill = "skyblue", position = position_dodge(padding=0.1), width=0.5) +
geom_bar(aes(y = avg_sampling_frequency_kHz), stat = "identity", fill = "orange", position = position_dodge(padding=0.1),width=0.5) +
labs(title = "Mean File Size and Sampling Frequency by Site ID",
x = "Site ID",
y = "Value") +
scale_y_continuous(sec.axis = sec_axis(~., name = "Mean Sampling Frequency")) +
theme_bw()
# Set up the plot for file sizes and sampling frequency
ggplot(size_check, aes(x = site_ID)) +
geom_bar(aes(y = avg_file_size_mb), stat = "identity", fill = "skyblue", position = position_dodge(width = NULL, preserve = "total", padding=0.1), width=0.5) +
geom_bar(aes(y = avg_sampling_frequency_kHz), stat = "identity", fill = "orange", position = position_dodge(width = NULL, preserve = "total", padding=0.1),width=0.5) +
labs(title = "Mean File Size and Sampling Frequency by Site ID",
x = "Site ID",
y = "Value") +
scale_y_continuous(sec.axis = sec_axis(~., name = "Mean Sampling Frequency")) +
theme_bw()
size_check_long <- size_check %>%
pivot_longer(cols = c(avg_file_size_mb, avg_sampling_frequency),
names_to = "variable",
values_to = "value")
